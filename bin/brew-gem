#!/usr/bin/env ruby
require 'erb'
require 'tempfile'

if  !ARGV[0] || ARGV[0] == 'help'
  abort "Usages:
  #{$0} install <gem-name> [<version>] # install from RubyGems
  #{$0} install --local=<path-to-local.gem> # install from local gemfile
  #{$0} install --github=<git@github.com:project/repo.git> # install from local github gem
  #{$0} update <gem-name> # update a gem installed from RubyGems
  #{$0} uninstall gem-name"
end

def run(command, options={})
  if command.is_a? Array
    command.each do |single_command|
      break unless run single_command
    end
  else
    puts "Executing \"#{command}\"..."
    if options[:takeover]
      exec command # take over the process
    else
      system command
    end
  end
end

command = ARGV[0]
if ARGV[1] =~ /^--local/
  local_gem_path = File.expand_path(ARGV[1].match(/^--local=(.*)/)[1])
  name, version = local_gem_path.match(/.*\/([^-]+)-(.*)\.gem$/)[1..2]
elsif ARGV[1] =~ /^--github/
  # clone from github and build gem
  github_gem_path = ARGV[1].match(/^--github=(.*)/)[1]
  name = github_gem_path.match(/.*\/(.*)\.git$/)[1]
  target_dir_name = File.join(Dir.tmpdir, "build-#{name}-#{rand(100000000)}")
  run "git clone #{github_gem_path} #{target_dir_name}"
  Dir.chdir(target_dir_name) do
    run "gem build #{File.join(target_dir_name, name)}.gemspec"
  end
  gem_name = `ls #{File.join(target_dir_name, '*')}.gem`.chomp

  # now install from local file
  run "#{$0} install --local=#{gem_name}", takeover: true
else # rubygems gem
  name = ARGV[1]
  version = ARGV[2] || $1
  gems = `gem list --remote "^#{name}$"`.lines
  unless gems.detect { |f| f =~ /^#{name} \(([^\s,]+).*\)/ }
    abort "Could not find a valid gem '#{name}'"
  end
end

klass = name.capitalize.gsub(/[-_.\s]([a-zA-Z0-9])/) { $1.upcase }.gsub('+', 'x')
user_gemrc = "#{ENV['HOME']}/.gemrc"

template = ERB.new(File.read(__FILE__).split(/^__END__$/, 2)[1].strip)

filename = File.join Dir.tmpdir, "#{name}.rb"

begin
  open(filename, 'w') do |f|
    f.puts template.result(binding)
  end

  system "brew #{command} #{filename}"
ensure
  File.unlink filename
end

__END__
require 'formula'
require 'fileutils'

class RubyGemsDownloadStrategy < AbstractDownloadStrategy
  def fetch
    ohai "Fetching #{name} from gem source"
    HOMEBREW_CACHE.cd do
      <% if local_gem_path %>
        system "cp", "<%= local_gem_path %>", "."
      <% else %>
        system "gem", "fetch", name, "--version", resource.version
      <% end %>
    end
  end

  def cached_location
    Pathname.new("#{HOMEBREW_CACHE}/#{name}-#{resource.version}.gem")
  end

  def clear_cache
    cached_location.unlink if cached_location.exist?
  end
end

class <%= klass %> < Formula
  url "<%= name %>", :using => RubyGemsDownloadStrategy
  version "<%= version %>"

  def install
    # Copy user's RubyGems config to temporary build home.
    buildpath_gemrc = "#{ENV['HOME']}/.gemrc"
    if File.exists?('<%= user_gemrc %>') && !File.exists?(buildpath_gemrc)
      FileUtils.cp('<%= user_gemrc %>', buildpath_gemrc)
    end

    # set GEM_HOME and GEM_PATH to make sure we package all the dependent gems
    # together without accidently picking up other gems on the gem path since
    # they might not be there if, say, we change to a different rvm gemset
    ENV['GEM_HOME']="#{prefix}"
    ENV['GEM_PATH']="#{prefix}"
    system "gem", "install", "<%= local_gem_path ? local_gem_path : 'cached_download' %>",
             "--no-ri",
             "--no-rdoc",
             "--no-wrapper",
             "--no-user-install",
             "--install-dir", prefix,
             "--bindir", bin

    bin.rmtree if bin.exist?
    bin.mkpath

    brew_gem_prefix = prefix+"gems/#{name}-#{version}"

    completion_for_bash = Dir[
                            "#{brew_gem_prefix}/completion{s,}/#{name}.{bash,sh}",
                            "#{brew_gem_prefix}/**/#{name}_completion{s,}.{bash,sh}"
                          ].first
    bash_completion.install completion_for_bash if completion_for_bash

    completion_for_zsh = Dir[
                           "#{brew_gem_prefix}/completions/#{name}.zsh",
                           "#{brew_gem_prefix}/**/#{name}_completion{s,}.zsh"
                         ].first
    zsh_completion.install completion_for_zsh if completion_for_zsh

    ruby_libs = Dir.glob("#{prefix}/gems/*/lib")
    Pathname.glob("#{brew_gem_prefix}/bin/*").each do |file|
      (bin+file.basename).open('w') do |f|
        f << <<-RUBY
#!/usr/bin/ruby
ENV['GEM_HOME']="#{prefix}"
ENV['GEM_PATH']="#{prefix}"
$:.unshift(#{ruby_libs.map(&:inspect).join(",")})
load "#{file}"
        RUBY
      end
    end
  end
end
